{
  "info": {
    "_postman_id": "88503338-b187-4bf1-997b-fa603815263e",
    "name": "Ambulance Analytics",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Init Test Suite",
      "item": [
        {
          "name": "INIT: Load Crypto Library for RS512",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2180cf2b-63d0-41ee-90d4-234b5192a1d4",
                "exec": [
                  "postman.setGlobalVariable(\"jsrsasign-js\", responseBody);",
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; }",
                  "pm.test(\"response is Ok\", function(){ pm.response.to.have.status(200); });",
                  "pm.test(\"response has body\", function(){ pm.response.to.be.withBody; });",
                  "pm.test(\"response has body\", function(){ pm.response.to.be.withBody; });",
                  "pm.test(\"global variable contains response\", function(){ pm.expect(postman.getGlobalVariable(\"jsrsasign-js\")).to.equal(responseBody) });",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://raw.githubusercontent.com/kjur/jsrsasign/master/jsrsasign-all-min.js",
              "protocol": "https",
              "host": [
                "raw",
                "githubusercontent",
                "com"
              ],
              "path": [
                "kjur",
                "jsrsasign",
                "master",
                "jsrsasign-all-min.js"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Happy Path Tests",
      "item": [
        {
          "name": "Unattended Access Token Request",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7ba308c4-d1ac-414f-8eea-e7a28d06b1e2",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "608f5f5a-718f-4db7-ac09-e7521cf6d5b1",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Ok\", function(){ pm.response.to.have.status(200); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON has access_token\", function(){ pm.expect(data).to.have.property('access_token'); });",
                  "postman.setEnvironmentVariable(\"ACCESS_TOKEN\", data.access_token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Data Submission",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "856b9803-2e0e-42b2-b48e-8b417f319405",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Successful\", function(){ pm.response.to.have.status(200); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has id\", function(){ pm.expect(data).to.have.property('id'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{ACCESS_TOKEN}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/submission",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "submission"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Required Fields",
      "item": [
        {
          "name": "Missing Grant Type",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "cb849ffb-a960-4cbc-9249-c125d49af4ae",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "cab3bf44-e16f-4738-b59a-d19ba02eaf67",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('grant_type is a required field'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Missing Client ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7b2b6748-6b48-4ffe-8455-2f0a3f3c6bc3",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "097c54e6-2984-444d-96ca-c5324385a310",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('client_id is a required field'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Missing Audience",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "716c2da3-0f75-4d25-90b4-d73ae9e7a061",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ecdb0f8e-059c-43d7-b4f1-efdb71f72c28",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('client_id is a required field'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Missing Client Assertion Type",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "737d256a-5c47-4d5a-8b97-06427163a39a",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c085e97f-5ed9-4079-8769-47a3f44b4629",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('client_assertion_type is a required field'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "JWT Validation",
      "item": [
        {
          "name": "Missing Issuer or Subject claims",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1f367543-1421-47a0-aecf-a672f0c63806",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1c20c4de-9ca5-45ed-9766-2f5d372d8586",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('iss and sub claims are required'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Issuer and Subject claims are not equal",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "61db84f4-a802-44d6-8961-67847e6dda7f",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": \"apples\",",
                  "    \"sub\": \"oranges\",",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a94d6cdf-d270-4821-86be-d0fa505b2f6f",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('iss and sub claims must be identical'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Missing Expiry",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "78ca88c1-6013-49ea-827f-6119ea7e7e0e",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5b1e8786-8492-4fb5-94cb-35719e98fe60",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('expiry claim is required to validate JWT'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Unsupported Encryption Algorithm (RS256)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "481b4749-15ac-406f-af80-0ec9e05b4a93",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS256\",",
                  "    \"kid\": \"test-rs256\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS256_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d84348fb-c15d-45d5-945c-0b93c088f065",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('Unsupported JWT Algorithm'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    }
  ],
  "protocolProfileBehavior": {}
}
