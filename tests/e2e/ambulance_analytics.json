{
  "info": {
    "_postman_id": "a4a1691a-e8bc-4e59-8eb9-61d614c82171",
    "name": "Ambulance Analytics",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Init Test Suite",
      "item": [
        {
          "name": "INIT: Load Crypto Library for RS512",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "816d3c4a-6193-4bbc-b120-7165d8fbb3c0",
                "exec": [
                  "postman.setGlobalVariable(\"jsrsasign-js\", responseBody);",
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; }",
                  "pm.test(\"response is Ok\", function(){ pm.response.to.have.status(200); });",
                  "pm.test(\"response has body\", function(){ pm.response.to.be.withBody; });",
                  "pm.test(\"response has body\", function(){ pm.response.to.be.withBody; });",
                  "pm.test(\"global variable contains response\", function(){ pm.expect(postman.getGlobalVariable(\"jsrsasign-js\")).to.equal(responseBody) });",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": "https://raw.githubusercontent.com/kjur/jsrsasign/master/jsrsasign-all-min.js"
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Happy Path Tests",
      "item": [
        {
          "name": "Unattended Access Token Request",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fdb31d48-1952-45e1-9300-4a77111d0b53",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300,",
                  "    \"aud\": pm.variables.replaceIn(pm.request.url.getRaw())",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "375c417e-20bd-40b3-a4e3-c14f2e8de884",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Ok\", function(){ pm.response.to.have.status(200); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON has access_token\", function(){ pm.expect(data).to.have.property('access_token'); });",
                  "postman.setEnvironmentVariable(\"ACCESS_TOKEN\", data.access_token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token"
          },
          "response": []
        },
        {
          "name": "Data Submission",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "37a70b78-83c0-48a3-baf9-8016ebad09af",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Successful\", function(){ pm.response.to.have.status(200); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has id\", function(){ pm.expect(data).to.have.property('id'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{ACCESS_TOKEN}}",
                "type": "text"
              }
            ],
            "url": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/submission"
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Required Fields",
      "item": [
        {
          "name": "Missing Grant Type",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2124735a-fedc-46d1-a0a1-99ec03694096",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ee2ebc3a-5329-4ac1-bdf4-1cb235853c04",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('grant_type is a required field'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token"
          },
          "response": []
        },
        {
          "name": "Missing Client ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4d8c0053-f590-4453-9a56-ee86ca62b2b8",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "70fa98d3-81a1-4900-92e4-2c3b3c35e30e",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('client_id is a required field'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token"
          },
          "response": []
        },
        {
          "name": "Missing Client Assertion Type",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2c1fc40d-3439-4e16-8e81-b3f5189b4686",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5523c6da-dcd3-4d48-a351-cbe32d343866",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('client_assertion_type is a required field'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token"
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "JWT Validation",
      "item": [
        {
          "name": "Missing Audience",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "87ba2b7e-4b74-4d30-b755-92c730ceef55",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "90567ef5-ef54-486f-82ff-be4f6a55cc6b",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('aud claim is required'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token"
          },
          "response": []
        },
        {
          "name": "Wrong Audience",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "aad996db-b007-4d47-8a06-d6d7922571f4",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300,",
                  "    \"aud\": \"https://example.com/token\"",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c33310bd-0cdd-4629-84f2-7e8473b4cce5",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(401); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token"
          },
          "response": []
        },
        {
          "name": "Missing Issuer or Subject claims",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "312e04c2-2f18-484a-a83f-59de923a84b8",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1c58d3c9-b1a4-4939-8ebe-5943fb040024",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('iss and sub claims are required'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token"
          },
          "response": []
        },
        {
          "name": "Issuer and Subject claims are not equal",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8acc07c5-7ed9-4f06-91d4-8fc4ded8b99d",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": \"apples\",",
                  "    \"sub\": \"oranges\",",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2c1f5c6f-7145-4404-9f5b-51aef8904a68",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('iss and sub claims must be identical'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token"
          },
          "response": []
        },
        {
          "name": "Missing Expiry",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6bad7907-e895-4fbd-8ecf-73cdea6b4dd4",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c62d4598-9ec5-49a3-9bba-7cd127dd6903",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('expiry claim is required to validate JWT'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token"
          },
          "response": []
        },
        {
          "name": "Missing KID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d3caef21-8892-4682-9a0a-632761201fb1",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7d5a4c2a-7b23-4f01-bf81-f7b9b3db6fba",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('kid claim is required and cannot be empty validate JWT'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "KID is Empty",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a1088086-216e-4ed4-a338-de7069e785c1",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1d43c194-756c-4bc0-8585-cd6de2ee3417",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('kid claim is required and cannot be empty validate JWT'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Missing JTI",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d3caef21-8892-4682-9a0a-632761201fb1",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7d5a4c2a-7b23-4f01-bf81-f7b9b3db6fba",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('jti claim is required'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "JTI is Empty",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a1088086-216e-4ed4-a338-de7069e785c1",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "    \"jti\": null",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1d43c194-756c-4bc0-8585-cd6de2ee3417",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('jti claim is required'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "JTI Unique Identifier is unique",
          "item": [
            {
              "name": "Successful JTI Unique Identifier",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a1088086-216e-4ed4-a338-de7069e785c1",
                    "exec": [
                      "var navigator = {}; //fake a navigator object for the lib",
                      "var window = {}; //fake a window object for the lib",
                      "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                      "",
                      "var header = {",
                      "    \"typ\": \"JWT\",",
                      "    \"alg\": \"RS512\",",
                      "    \"kid\": \"test-rs512\"",
                      "}",
                      "",
                      "var data = {",
                      "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                      "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                      "    \"exp\": Math.floor(Date.now() / 1000) + 300,",
                      "    \"jti\": Math.floor(100000 + Math.random() * 900000)",
                      "};",
                      "",
                      "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                      "var sHeader = JSON.stringify(header);",
                      "var sPayload = JSON.stringify(data);",
                      "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                      "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "375c417e-20bd-40b3-a4e3-c14f2e8de884",
                    "exec": [
                      "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                      "var data = JSON.parse(responseBody);",
                      "pm.test(\"response is Ok\", function(){ pm.response.to.have.status(200); });",
                      "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                      "pm.test(\"response JSON has access_token\", function(){ pm.expect(data).to.have.property('access_token'); });",
                      "var sJWT = JSON.parse(postman.getEnvironmentVariable(\"jwt_token\"));",
                      "postman.setEnvironmentVariable(\"JTI_UNIQUE_ID\", sJWT.data.jti);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "{{client_id}}",
                      "type": "text"
                    },
                    {
                      "key": "client_assertion_type",
                      "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                      "type": "text"
                    },
                    {
                      "key": "client_assertion",
                      "value": "{{jwt_token}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "client_credentials",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
                  "protocol": "https",
                  "host": [
                    "{{base_url}}",
                    "api",
                    "service",
                    "nhs",
                    "uk"
                  ],
                  "path": [
                    "{{root_path}}",
                    "token"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Clashing JTI Unique Identifier",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a1088086-216e-4ed4-a338-de7069e785c1",
                    "exec": [
                      "var navigator = {}; //fake a navigator object for the lib",
                      "var window = {}; //fake a window object for the lib",
                      "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                      "",
                      "var header = {",
                      "    \"typ\": \"JWT\",",
                      "    \"alg\": \"RS512\",",
                      "    \"kid\": \"test-rs512\"",
                      "}",
                      "",
                      "var data = {",
                      "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                      "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                      "    \"exp\": Math.floor(Date.now() / 1000) + 300,",
                      "    \"jti\": postman.getEnvironmentVariable(\"JTI_UNIQUE_ID\")",
                      "};",
                      "",
                      "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                      "var sHeader = JSON.stringify(header);",
                      "var sPayload = JSON.stringify(data);",
                      "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                      "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "375c417e-20bd-40b3-a4e3-c14f2e8de884",
                    "exec": [
                      "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                      "var data = JSON.parse(responseBody);",
                      "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                      "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                      "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                      "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('jti claim must be unique'); });",
                      "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "{{client_id}}",
                      "type": "text"
                    },
                    {
                      "key": "client_assertion_type",
                      "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                      "type": "text"
                    },
                    {
                      "key": "client_assertion",
                      "value": "{{jwt_token}}",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "client_credentials",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
                  "protocol": "https",
                  "host": [
                    "{{base_url}}",
                    "api",
                    "service",
                    "nhs",
                    "uk"
                  ],
                  "path": [
                    "{{root_path}}",
                    "token"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Unsupported Encryption Algorithm (RS256)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "264a316b-064a-4cf3-80ae-ad7a414385a4",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS256\",",
                  "    \"kid\": \"test-rs256\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300,",
                  "    \"aud\": pm.variables.replaceIn(pm.request.url.getRaw())",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS256_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c5a7cb28-22e2-4b7f-b90f-6426a31d26f3",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('Unsupported JWT Algorithm'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token"
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    }
  ],
  "protocolProfileBehavior": {}
}
