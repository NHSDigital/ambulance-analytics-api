{
  "info": {
    "_postman_id": "88665f4d-1696-4cfb-8eb3-65600b1ee526",
    "name": "Ambulance Analytics",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Init Test Suite",
      "item": [
        {
          "name": "INIT: Load Crypto Library for RS512",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d86b6e9-c6cd-4355-8825-be846dac9442",
                "exec": [
                  "postman.setGlobalVariable(\"jsrsasign-js\", responseBody);",
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; }",
                  "pm.test(\"response is Ok\", function(){ pm.response.to.have.status(200); });",
                  "pm.test(\"response has body\", function(){ pm.response.to.be.withBody; });",
                  "pm.test(\"response has body\", function(){ pm.response.to.be.withBody; });",
                  "pm.test(\"global variable contains response\", function(){ pm.expect(postman.getGlobalVariable(\"jsrsasign-js\")).to.equal(responseBody) });",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://raw.githubusercontent.com/kjur/jsrsasign/master/jsrsasign-all-min.js",
              "protocol": "https",
              "host": [
                "raw",
                "githubusercontent",
                "com"
              ],
              "path": [
                "kjur",
                "jsrsasign",
                "master",
                "jsrsasign-all-min.js"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Happy Path Tests",
      "item": [
        {
          "name": "Unattended Access Token Request",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9fb59e50-2ec9-48df-961a-c454543a2768",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var url = pm.variables.replaceIn(pm.request.url.getHost()+pm.request.url.getPath())",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300,",
                  "    \"aud\": `https://${url}`",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b28734a5-0cd5-43bc-befa-ffc59484cf5a",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Ok\", function(){ pm.response.to.have.status(200); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON has access_token\", function(){ pm.expect(data).to.have.property('access_token'); });",
                  "postman.setEnvironmentVariable(\"ACCESS_TOKEN\", data.access_token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Data Submission",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "79311795-070e-4fc3-accd-77ae502ed8e1",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Successful\", function(){ pm.response.to.have.status(200); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has id\", function(){ pm.expect(data).to.have.property('id'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{ACCESS_TOKEN}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/submission",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "submission"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Required Fields",
      "item": [
        {
          "name": "Missing Grant Type",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "98e88dbb-0116-4bb7-a1d6-20fd335d73a6",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2a52f49f-9129-4942-a65c-ae9f574b5fc9",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('grant_type is a required field'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Missing Client ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8be3aca7-a3dc-46c1-bdc9-cb6bc687b1e0",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "43bdb363-ebaf-47f1-9680-708fc4b7958c",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('client_id is a required field'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Missing Client Assertion Type",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "707717d2-edb0-4153-9d7d-c7f9077c8a08",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1a4de114-6f97-4f50-8079-6860413196af",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('client_assertion_type is a required field'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "JWT Validation",
      "item": [
        {
          "name": "Missing Audience",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f1749c06-9727-4b24-a0f2-4a9c922687cb",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b957c73e-2572-488d-9e8a-60df923d72ac",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('invalid or missing aud claim'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Wrong Audience",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "57ce4558-eede-40d4-8d00-a8cd177c40eb",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300,",
                  "    \"aud\": \"www.example.com/token\"",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d2474699-16a1-434f-98dd-9d5db1512218",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('invalid or missing aud claim'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Missing Issuer or Subject claims",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d460d32a-d7f1-4c6f-845f-ebbcb144c8ff",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "501bf69b-84f0-48e9-81a8-7c30f4e52bf6",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('iss and sub claims are required'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Issuer and Subject claims are not equal",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c08bce7f-5e63-4a27-8a0f-7366674f8007",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": \"apples\",",
                  "    \"sub\": \"oranges\",",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "74422593-e37c-4af0-a145-b69e07bc99ca",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('iss and sub claims must be identical'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Missing Expiry",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bbad2d86-aae5-423b-8b56-26e509df57fb",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "908ab2a9-4df5-460f-9ed0-2fb9ad611d6b",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('expiry claim is required to validate JWT'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Unsupported Encryption Algorithm (RS256)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "24542569-eb2d-4ef2-b561-b6c541b23af9",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS256\",",
                  "    \"kid\": \"test-rs256\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS256_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f19e15d7-9762-40dd-923e-47eff6809d34",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('Unsupported JWT Algorithm'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    }
  ],
  "protocolProfileBehavior": {}
}
