{
  "info": {
    "_postman_id": "b8f88587-cd76-41e6-b31b-dd4a549709ea",
    "name": "Ambulance Analytics",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Init Test Suite",
      "item": [
        {
          "name": "INIT: Load Crypto Library for RS512",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3503c30a-f9dc-484f-a1dd-9bf0e58bdb65",
                "exec": [
                  "postman.setGlobalVariable(\"jsrsasign-js\", responseBody);",
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; }",
                  "pm.test(\"response is Ok\", function(){ pm.response.to.have.status(200); });",
                  "pm.test(\"response has body\", function(){ pm.response.to.be.withBody; });",
                  "pm.test(\"response has body\", function(){ pm.response.to.be.withBody; });",
                  "pm.test(\"global variable contains response\", function(){ pm.expect(postman.getGlobalVariable(\"jsrsasign-js\")).to.equal(responseBody) });",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://raw.githubusercontent.com/kjur/jsrsasign/master/jsrsasign-all-min.js",
              "protocol": "https",
              "host": [
                "raw",
                "githubusercontent",
                "com"
              ],
              "path": [
                "kjur",
                "jsrsasign",
                "master",
                "jsrsasign-all-min.js"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Happy Path Tests",
      "item": [
        {
          "name": "Unattended Access Token Request",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b29818d8-2951-4f34-8160-9f7578f562f7",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var url = pm.variables.replaceIn(pm.request.url.getHost()+pm.request.url.getPath())",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300,",
                  "    \"aud\": `https://${url}`",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d3c2bf84-0c59-4dc5-a4ed-f4fbb043b6e8",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Ok\", function(){ pm.response.to.have.status(200); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON has access_token\", function(){ pm.expect(data).to.have.property('access_token'); });",
                  "postman.setEnvironmentVariable(\"ACCESS_TOKEN\", data.access_token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Data Submission",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f628bc95-009c-4b83-972b-9bf6a64fd7cb",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Successful\", function(){ pm.response.to.have.status(200); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has id\", function(){ pm.expect(data).to.have.property('id'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{ACCESS_TOKEN}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/submission",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "submission"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Required Fields",
      "item": [
        {
          "name": "Missing Grant Type",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e4d88f77-75ed-430b-9297-266d0f3627c4",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b2deb961-8e52-4ba7-9b10-3ef8d308447a",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('grant_type is a required field'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Missing Client ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "821579e2-b2da-4eb1-993e-4db3851e152f",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "30d8e041-c136-4ba3-98a8-d9bd28de3c0d",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('client_id is a required field'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Missing Client Assertion Type",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d8b8e026-fb56-4dea-8833-ffbf072149ab",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "89c54acf-809e-4c3a-8f8f-e401fd647496",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('client_assertion_type is a required field'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "JWT Validation",
      "item": [
        {
          "name": "Missing Audience",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "87ba2b7e-4b74-4d30-b755-92c730ceef55",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "90567ef5-ef54-486f-82ff-be4f6a55cc6b",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('aud claim is required'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Wrong Audience",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "aad996db-b007-4d47-8a06-d6d7922571f4",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300,",
                  "    \"aud\": \"www.example.com/token\"",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c33310bd-0cdd-4629-84f2-7e8473b4cce5",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(401); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Missing Issuer or Subject claims",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b6548aee-8b27-47f7-bfa3-00278a729cc4",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bfcbfe7c-9aa5-4bc1-a5d8-272280d249a5",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('iss and sub claims are required'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Issuer and Subject claims are not equal",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8d217032-a849-4b7f-a895-51c36f95017a",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": \"apples\",",
                  "    \"sub\": \"oranges\",",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "70420462-0b23-403b-9c7d-265c49a440fe",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('iss and sub claims must be identical'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Missing Expiry",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0e13c73f-aded-40d3-ac04-75bf34e23ad0",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS512\",",
                  "    \"kid\": \"test-rs512\"",
                  "}",
                  "",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS512_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS512\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "83db6d43-e07a-4b40-a3d9-62ef3a5e5143",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('expiry claim is required to validate JWT'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Unsupported Encryption Algorithm (RS256)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "098ae70d-0f2b-449d-b7b4-2c4c87d1b72c",
                "exec": [
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(postman.getGlobalVariable(\"jsrsasign-js\")); //import jsrsasign lib",
                  "",
                  "var header = {",
                  "    \"typ\": \"JWT\",",
                  "    \"alg\": \"RS256\",",
                  "    \"kid\": \"test-rs256\"",
                  "}",
                  "",
                  "var url = pm.variables.replaceIn(pm.request.url.getHost()+pm.request.url.getPath())",
                  "var data = {",
                  "    \"iss\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"sub\": postman.getEnvironmentVariable(\"client_id\"),",
                  "    \"exp\": Math.floor(Date.now() / 1000) + 300,",
                  "    \"aud\": `https://${url}`",
                  "};",
                  "",
                  "var secret = postman.getEnvironmentVariable(\"RS256_PRIVATE_KEY\");",
                  "var sHeader = JSON.stringify(header);",
                  "var sPayload = JSON.stringify(data);",
                  "var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, secret);",
                  "postman.setEnvironmentVariable(\"jwt_token\", sJWT);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "acae7a36-6a6a-4bc9-bfe3-634a565e87bd",
                "exec": [
                  "if (postman.getEnvironmentVariable(\"DEBUG\") == \"true\") { tests[\"[INFO] Request: \" + JSON.stringify(request)] = true; tests[\"[INFO] Response: \" + responseBody] = true; }",
                  "var data = JSON.parse(responseBody);",
                  "pm.test(\"response is Bad Request\", function(){ pm.response.to.have.status(400); });",
                  "pm.test(\"response has JSON body\", function(){ pm.response.to.be.withBody; pm.response.to.be.json; });",
                  "pm.test(\"response JSON body has error\", function(){ pm.expect(data).to.have.property('error'); });",
                  "pm.test(\"response JSON body has error message\", function(){ pm.expect(data.error).to.equal('Unsupported JWT Algorithm'); });",
                  "pm.test(\"response JSON does not have access_token\", function(){ pm.expect(data).to.not.have.property('access_token'); });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "type": "text"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "client_assertion",
                  "value": "{{jwt_token}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "https://{{base_url}}.api.service.nhs.uk/{{root_path}}/token",
              "protocol": "https",
              "host": [
                "{{base_url}}",
                "api",
                "service",
                "nhs",
                "uk"
              ],
              "path": [
                "{{root_path}}",
                "token"
              ]
            }
          },
          "response": []
        }
      ],
      "protocolProfileBehavior": {}
    }
  ],
  "protocolProfileBehavior": {}
}
